// <auto-generated />
using System;
using Infrastructure.Persistency;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ShippingDbContext))]
    [Migration("20240625205932_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aggrgates.CargoAggregate.Cargo", b =>
                {
                    b.Property<int>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("TrackingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Domain.Aggrgates.CarrierMovementAggregate.CarrierMovement", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("FromLocationLocationId")
                        .HasColumnType("int");

                    b.Property<int>("ToLocationLocationId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.HasIndex("FromLocationLocationId");

                    b.HasIndex("ToLocationLocationId");

                    b.ToTable("CarrierMovements");
                });

            modelBuilder.Entity("Domain.Aggrgates.CustomerAggregate.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Aggrgates.HandlingIncidentAggregate.HandlingEvent", b =>
                {
                    b.Property<int>("TrackingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TrackingId", "TimeStamp", "Type");

                    b.ToTable("HandlingEvents");
                });

            modelBuilder.Entity("Domain.Aggrgates.LocationAggregate.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("PortCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.Aggrgates.CargoAggregate.Cargo", b =>
                {
                    b.HasOne("Domain.Aggrgates.CustomerAggregate.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Aggrgates.CargoAggregate.DeliverySpecification", "DeliveryGoal", b1 =>
                        {
                            b1.Property<int>("CargoTrackingId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("ArrivelTime")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeliveryGoalArrivelTime");

                            b1.Property<int>("DestinationId")
                                .HasColumnType("int")
                                .HasColumnName("DeliveryGoalDestinationId");

                            b1.HasKey("CargoTrackingId");

                            b1.ToTable("Cargos");

                            b1.WithOwner()
                                .HasForeignKey("CargoTrackingId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("DeliveryGoal")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggrgates.CarrierMovementAggregate.CarrierMovement", b =>
                {
                    b.HasOne("Domain.Aggrgates.LocationAggregate.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Aggrgates.LocationAggregate.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");
                });
#pragma warning restore 612, 618
        }
    }
}
