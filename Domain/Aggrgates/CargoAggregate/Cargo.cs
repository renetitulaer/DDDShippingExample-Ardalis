using Ardalis.SharedKernel;
using Domain.Aggrgates.HandlingEventAggregate;

namespace Domain.Aggrgates.CargoAggregate;

public class Cargo : EntityBase, IAggregateRoot 
{
    //public IShippingDbContext ShippingDbContext { get ; set ; } = null!;

    /* This constructor is used by EF Core while
       getting the entity from database */
    private Cargo() { }

    internal Cargo(int customerId, RouteSpecification routeSpecification)
    {
        CustomerId = customerId;
        RouteSpecification = routeSpecification;
    }

    /// <summary>
    /// Key -> auto generated by EF
    /// Identity: this is known in the outside
    /// </summary>
    public int Id { get; }

    public int CustomerId { get; private set; }

    public RouteSpecification RouteSpecification { get; private set; }

    private readonly List<HandlingEvent> _deliveryHistory = new();
    public IReadOnlyCollection<HandlingEvent> DeliveryHistory => _deliveryHistory.AsReadOnly();

    public void ChangeDeliveryGoal(RouteSpecification routeSpecification)
    {
        RouteSpecification = routeSpecification;
    }

    public void RegisterHandlingEvent(HandlingEvent handlingEvent)
    {
        if (handlingEvent.TrackingId != Id)
        {
            throw new InvalidOperationException("Handling event does not match this cargo.");
        }
        _deliveryHistory.Add(handlingEvent);
    }
}
